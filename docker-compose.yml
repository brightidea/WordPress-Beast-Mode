version: "3.7"

networks:
  wpbeastmode:

services:
  traefik:
    container_name: traefik
    image: traefik:2.0
    restart: always
    depends_on:
      - db
      - api
      - frontend
    networks:
      - wpbeastmode
    command:
      - --log.level=INFO
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --api=true
      - --certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
      #- --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/certs:/acme
    labels:
      - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.to-https.entrypoints=web
      - traefik.http.routers.to-https.middlewares=to-https

      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt

      - traefik.http.middlewares.to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD}
    env_file:
      - ./.env

  whoami:
    hostname: whoami.${DOMAIN}
    image: containous/whoami
    restart: always
    env_file:
      - ./.env
    labels:
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.tls=true
      - traefik.http.routers.whoami.tls.certresolver=letsencrypt
    networks:
      - wpbeastmode
      
  api:
    hostname: api.${DOMAIN}
    image: 'docker.io/bitnami/wordpress:5.6.0'
    container_name: api
    restart: always
    environment:
      MARIADB_HOST: db
      MARIADB_PORT_NUMBER: 3306
      WORDPRESS_DATABASE_USER: "${DB_USER}"
      WORDPRESS_DATABASE_NAME: "${DB_NAME}"
      WORDPRESS_DATABASE_PASSWORD: "${DB_PASSWORD}"
    depends_on:
      - db
    links:
      - db
    volumes:
      - api_data:/bitnami/wordpress
      - ./backend/vendor:/bitnami/wordpress/vendor
      - ./config/wp-config.php:/bitnami/wordpress/wp-config.php:delegated
      - ./config/s3.php:/bitnami/wordpress/wp-content/mu-plugins/s3.php
      - ./.env:/bitnami/wordpress/.env
      - ./backend/wp-content:/bitnami/wordpress/wp-content
      - ./data/logs/:/bitnami/logs/:delegated
    tty: true
    ports:
      - 8080:8080
      - 8443:8443
    networks:
      - wpbeastmode
    labels:
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=8080
    env_file:
      - ./.env
    
  composer:
    restart: 'no'
    image:  composer:latest
    command: install
    volumes:
      - ./backend/vendor:/app/vendor
      - ./backend/wp-content:/app/backend/wp-content
      - ./composer.json:/app/composer.json

  # gutenbergserver:
  #   restart: 'no'
  #   build:
  #     context: ./config/gutenberg-server 
  #   container_name: gutenbergserver
  #   depends_on:
  #     - api
  #   ports:
  #     - 5000:5000
    
  frontend:
    hostname: ${DOMAIN}
    build:
      context: ./frontend
    container_name: frontend
    depends_on:
      - api
    ports:
      - 3000:3000
    command: npm run dev
    labels:
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    networks:
      - wpbeastmode
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
      - /app/.next
    env_file:
      - ./.env

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis.conf:/redis.conf:cached
    networks:
      - wpbeastmode
    command: [ "redis-server", "/redis.conf" ]
    labels:
      - traefik.enable=false

  db:
    image: mysql:5.7.29
    container_name: db
    ports:
      - "3307:3306"
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./config/database-seed:/docker-entrypoint-initdb.d
    networks:
      - wpbeastmode
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wpbeastmode
      MYSQL_USER: wpbeastmode
      MYSQL_PASSWORD: password
    labels:
      - traefik.enable=false

volumes:
  api_data: {}
  db_data: {}  